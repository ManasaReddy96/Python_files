{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "22d90210",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Write a Python program to loop through all the elements in a list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7ac41f8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "x=[1,2,3,4,5,6]\n",
    "\n",
    "for y in x:\n",
    "    print(y)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a544def8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2)  Write a Python program where you will ask the users to insert elements in a list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "adbf22d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a number1\n",
      "enter a number2\n",
      "enter a number3\n",
      "enter a number4\n",
      "enter a number5\n",
      "['1', '2', '3', '4', '5']\n"
     ]
    }
   ],
   "source": [
    "y=[]\n",
    "for x in range(0,5):\n",
    "    y.append(input(\"enter a number\"))\n",
    "print(y)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "592b8383",
   "metadata": {},
   "outputs": [],
   "source": [
    "#3. Write a Python program to remove all the odd index value from a list and only even\n",
    "#index elements should remain\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a61f3cee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 5, 7]\n"
     ]
    }
   ],
   "source": [
    "y=[1,2,3,4,5,6,7,8]\n",
    "for x in range(1,(len(y)//2)+1):\n",
    "    del y[x]\n",
    "    \n",
    "print (y)\n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "676afd1f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 4.Write a Python program to sum and multiply all the items in a list\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bd0ca96e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number:3\n",
      "Enter a number:4\n",
      "Enter a number:5\n",
      "Enter a number:6\n",
      "[3, 4, 5, 6]\n",
      "Sum of the numbers:  18\n",
      "Product of the numbers:  360\n"
     ]
    }
   ],
   "source": [
    "l=[]\n",
    "for i in range(1,5):\n",
    "    lst=int(input(\"Enter a number:\"))\n",
    "    l.append(lst)\n",
    "print(l)\n",
    "sum=0\n",
    "product=1\n",
    "for i in l:\n",
    "    sum=sum+i\n",
    "    product=product*i\n",
    "print(\"Sum of the numbers: \",sum)\n",
    "print(\"Product of the numbers: \",product)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cfd082d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 5) Write a Python program to get the maximum and minimum numbers from a list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f74d5537",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "minimum number : 1\n",
      "maximum number: 562\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "x=[1,23,4,562,133,2,3]\n",
    "for var in x:\n",
    "    mini=np.min(x)\n",
    "    maxi=np.max(x)\n",
    "print (\"minimum number :\",mini)\n",
    "print(\"maximum number:\",maxi)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "858ee1ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 6)  Write a Python program to print a specified list after removing the 0th, 4th and 5th elements.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fbc84bf6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 6, 7, 8]\n"
     ]
    }
   ],
   "source": [
    "x=[0,1,2,3,4,5,6,7,8]\n",
    "y=[0,4,5]\n",
    "z=[item for index,item in enumerate(x)if index not in y]\n",
    "print(z)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0a2ae41",
   "metadata": {},
   "outputs": [],
   "source": [
    "#7)Write a Python program to convert a list of characters into a string\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6823e26b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12345\n"
     ]
    }
   ],
   "source": [
    "x=[\"1\",\"2\",\"3\",\"4\",\"5\"]\n",
    "y=''.join(x)\n",
    "print(y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "342626c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#8)Write a Python program to compute average of given lists."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "90e4f99d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average of lst1 and lst2 is 4.75\n"
     ]
    }
   ],
   "source": [
    "lst1 = [2,5,8,4]\n",
    "lst2 = [3,9,6,1]\n",
    "sum = 0\n",
    "for i in lst1:\n",
    "    sum += i\n",
    "for j in lst2:\n",
    "    sum += j\n",
    "print(\"The average of lst1 and lst2 is {}\".format(sum/(len(lst1)+len(lst2))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aae67005",
   "metadata": {},
   "outputs": [],
   "source": [
    "#9) Write a Python program to count integer in a given mixed list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "681e24ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    }
   ],
   "source": [
    "lst = [3, 47, \"abc\", 7, \"man\", 5, 4]\n",
    "count = 0\n",
    "for i in lst:\n",
    "    if type(i) == int:\n",
    "        count += 1\n",
    "print(count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3a88fa8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter your list: 1,2,3,4\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'4,3,2,1'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l=input('enter your list: ')\n",
    "list(l)\n",
    "l[::-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f899e28c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#11) Write a Python program convert a given string to a tuple\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "97a39a21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a string :python\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "('p', 'y', 't', 'h', 'o', 'n')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=input(\"Enter a string :\")\n",
    "tuple((x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16ce9fe0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
